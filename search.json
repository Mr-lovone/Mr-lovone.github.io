[{"title":"hexo折腾记录——hexo框架+butterfly主题+Qexo可视化后台","url":"/posts/c11e20be/","content":"\n理想中的博客：\n\n全程免费&#x2F;极少收费项目\n美观\n写文章和推送操作简单\n\n\n\n理想中的操作过程：\n\n使用电脑或者手机打开后台管理\n编写文章\n将文章发布到博客\n\n\n实际上，如果你只是简单地使用 hexo +一些主题，并不能做到上面的随时随地编写文章，因为他需要我们经常性地手动执行命令，这非常不优雅。如果你想随时随地及时地编写博客，少敲命令，那么你可以继续看下去了。\n\n前期环境准备\n任意平台安装即可，我是在 windows 中安装的。\n\nnodejs 安装参考链接：Node.js 安装配置 | 菜鸟教程\n\nPS： 我使用的是 v22.20.0\n\n验证：\n\nC:\\Users\\lovone&gt;node –version\nv22.20.0C:\\Users\\lovone&gt;npm -v\n10.9.3\n\n出现版本号说明安装成功。\ngit 安装参考链接：Git 安装配置 | 菜鸟教程\n验证：\n\nC:\\Users\\lovone&gt;git -h\nusage: git……\n\n搭建 hexo\n注意：本文中，后续所有的命令都是在 Git Bash 中敲的。\n\n拉取 hexo\n注意：如果 npm 拉取速度比较慢，请自行更换为国内源\n\nnpm install hexo-cli -g\n\n创建本地环境创建一个文件夹，用做hexo的根目录并初始化\n# 创建hexo文件夹mkdir hexo# 进入该文件夹cd hexo# hexo初始化hexo init# 安装必要的库npm install# 生成hexo的静态网页hexo g# 本地测试hexo s\n\n此时会在本地启动一个临时服务器供用户预览，点击提示链接 http://localhost:4000/访问。\n\n创建 github pages 仓库在github上创建一个公有仓库 ，用来存放博客静态文件。注意 ：\n\n该仓库必须是公有仓库（public）\n该仓库的名字必须为 [你的 github 用户名].github.io\n\n\n然后在该仓库中，点击 Settings -&gt; Pages，按照如图配置即可。\n\n域名解析的题外话如果你在国内已经有了域名，无论是否备案了，都可以解析到 github pages。只需要在上面的 Custom domain 中填写你的域名即可。（这里有点记不清了……）\n配置hexo-deploy安装hexo-deploy工具npm install hexo-deployer-git --save\n\n编辑 hexo 的 _config.yaml 文件编辑 hexo 的 _config.yaml 文件，在末尾的deploy 处添加以下内容（注意：deploy 字段只能有一个）\ndeploy:  type: git  repo: git@github.com:你的用户名/你的用户名.github.io  branch: main\n\n部署到 github配置gitgit config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你的Github邮箱&quot;\n\n你可以使用下面的命令查看是否配置成功。\ngit config get --global user.namegit config get --global user.email\n\n生成密钥cd ~/.ssh/                # 切换到用户主目录下的.ssh文件夹（如果没有会自动创建）ssh-keygen -t ed25519 -C &quot;你的邮箱&quot;  # 使用ed25519算法生成密钥对，并添加邮箱作为注释cat id_ed25519.pub\t\t\t\t# 可以看到因嘎嘎i放在github上的公钥\n\n一路回车，生成的key会保存在你的用户文件夹中的 .ssh文件夹下，公钥为 id_ed25519.pub的文件。接下来登录Github，在 Settings -&gt; SSH and GPG keys -&gt; new SSH keys选择 Authentication Key上传公钥内容。\n测试连接ssh -T git@github.com\n\n\nHi 【你的 github 用户名】! You’ve successfully authenticated, but GitHub does not provide shell access.\n\n出现上面的内容，说明已经成功了。\n测试部署 hexo 的静态网站hexo g &amp;&amp; hexo d\n\n此时，你应该可以访问 https://你的 github 用户名.github.io 来访问到你的博客主页了。\n安装主题 butterfly\nhexo 社区维护着大量的主题包，此处仅介绍 Butterfly ，其余主题请自行安装和配置\n\n克隆主题 butterfly在hexo目录下输入以下命令\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n\n安装 pug 和 stylus 的渲染器npm install hexo-renderer-pug hexo-renderer-stylus --save\n\n应用主题修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly\ntheme: butterfly\n\n升级建议为了减少升级主题后带来的不便，请使用以下方法：\n在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把目录 themes&#x2F;butterfly 下的 _config.yml 内容复制到 _config.butterfly.yml 去。\n\n注意：\n\n不要把主题目录 themes&#x2F;butterfly 下的 _config.yml 删掉。\n复制的是主题butterfly的 _config.yml ，而不是 hexo 的 _config.yml\n以后只需要在 _config.butterfly.yml 进行配置就行。如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。\n\n\nTips: 此时你可以依次执行命令 hexo clean、hexo g、hexo s，根据提示链接预览主题是否已经更新。\n利用 GitHub Actions 进行自动化部署创建自动化部署 Actions 脚本在 hexo 的 .github文件夹下新建 workflows文件夹，在该文件夹下创建 main.yml文件，内容如下：\nname: Blog CI/CD # 脚本 workflow 名称#测试Actionson:  push:    branches: [main, master] # 当监测 main,master 的 push    paths: # 监测所有 source 目录下的文件变动，所有 yml,json 后缀文件的变动。      - &#x27;*.json&#x27;      - &#x27;**.yml&#x27;      - &#x27;**/source/**&#x27;jobs:  blog: # 任务名称    timeout-minutes: 30 # 设置 30 分钟超时    runs-on: ubuntu-latest # 指定最新 ubuntu 系统    steps:      - name: Checkout code with submodules        uses: actions/checkout@v4        with:          token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;          fetch-depth: 1          submodules: false  # ✅✅ 关键：使用自定义的butterfly主题，该参数必须为false。否则需要为true        - uses: actions/setup-node@v4 # 设置 node.js 环境      - name: Cache node_modules # 缓存 node_modules，提高编译速度，毕竟每月只有 2000 分钟。        uses: actions/cache@v4 # 亲测 Github 服务器编译速度比我自己电脑都快，如果每次构建按5分钟计算，我们每个月可以免费部署 400 次，Github yyds！！！        env:          cache-name: cache-node-modules        with:          path: ~/.npm          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;          restore-keys: |            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-            $&#123;&#123; runner.os &#125;&#125;-build-            $&#123;&#123; runner.os &#125;&#125;-      - name: Init Node.js # 安装源代码所需插件        run: |          npm install          echo &quot;init node successful&quot;      - name: Install Hexo-cli And component # 安装 Hexo        run: |          npm install -g hexo-cli --save          npm install hexo-generator-sitemap --save          npm install hexo-generator-baidu-sitemap --save          npm install hexo-abbrlink --save          npm install hexo-renderer-pug hexo-renderer-stylus --save          npm i hexo-renderer-markdown-it --save          npm install hexo-generator-searchdb          npm install katex @renbaoshuo/markdown-it-katex          npm install hexo-wordcount --save          npm i hexo-filter-nofollow --save          npm install hexo-generator-feed --save          # 🔔注意：如果后期还需要增加其他的插件，记得在这里进行添加          echo &quot;install hexo successful&quot;      - name: Build Blog # 编译创建静态博客文件        run: |          hexo clean &amp;&amp; hexo g          echo &quot;build blog successful&quot;      - name: Deploy Blog # 设置 git 信息并推送静态博客文件        run: |          cd ./public          git init          git config user.name &quot;$&#123;&#123;secrets.GIT_NAME&#125;&#125;&quot;          git config user.email &quot;$&#123;&#123;secrets.GIT_EMAIL&#125;&#125;&quot;          git add .          git commit -m &quot;Update&quot;          git push --force --quiet &quot;https://$&#123;&#123;secrets.GH_TOKEN&#125;&#125;@$&#123;&#123;secrets.GH_REF&#125;&#125;&quot; master:main      - run: echo &quot;Deploy Successful!&quot;\n\n🔔 注意：如果后期还需要增加其他的插件，记得在 50 行前后进行添加\n配置私有仓库 Blog-Source这里实际上在配置博客的源码仓库。后续我们的 Qexo 时直接操作这个源码仓库，在我们增加或修改后，GitHub Actions 会监测到仓库的修改，然后 Actions 会自动执行一系列的操作，而自动执行的这些操作我们是可以自定义的。因此我们可以利用 github 的Actions 重新生成我们的博客并且自动化部署到 github.io。\n\n可以不叫Blog-Source，改成其他名称也行。\n\n新建私有仓库 Blog-Source如图\n\n连接私有仓库 Blog-Source由于上面我们连接的是 github.io 的仓库，现在需要将源码推送到Blog-Source，因此需要修改连接仓库的名字。\ngit remote set-url origin https://github.com/你的用户名/Blog-Source.git\n\n配置私有仓库的 Secret。在Actions 脚本中，我们引入了四个变量，GIT_NAME, GIT_EMAIL, GH_TOKEN,GH_REF，接下来，我们需要在私有仓库 Blog-Source 中配置它们。在 Blog-Source -&gt; Settings -&gt; Secrets and variables -&gt; Actions -&gt; Secrets 中添加用于Github Action的Secrets。\n\n\nGIT_NAME的就是Github账号的用户名\nGIT_EMAIL就是Github账号所使用的邮箱\nGH_REF 的内容为 github.com/用户名/用户名.github.io.git\nGH_TOKEN需要在 Github -&gt; Settings -&gt; Developer Settings -&gt; Personal Access tokens -&gt; Tokens(classic) 获取，选择生成 classic类型的token，为了简便可以把token过期时间设置为 永不过期，权限范围勾选repo和workflow\n\n\n移除 butterfly 的子模块属性(可选)\n注意：移除 butterfly 的子模块属性，主要是为了方便我们后面魔改 butterfly 主题，如果你不需要魔改 butterfly，那么请看第 4.4 步。PS： 本人使用的是 4.3 步骤。\n\n这里需要解释一下这一步：未来我们需要将 hexo 文件夹推送到 github 的 Blog-Source 仓库，而我们是使用 git 安装的Butterfly 主题，这会导致 Butterfly 主题被作为 Git 子模块引入，那么我们修改本地的 Butterfly 主题不会被同步到 github，因为子模块的修改默认不会被主仓库跟踪和部署，因此这里需要移除它的字模块属性。\n# 移除子模块记录（不删除文件）git rm --cached themes/butterflyrm -rf .git/modules/themes/butterfly# 删除子模块配置文件中的记录（如果存在）# 编辑 .gitmodules 文件，删除关于 themes/butterfly 的段落，然后保存# 将修改后的主题目录添加到主仓库# git add themes/butterflygit add .git commit -m &quot;将主题butterfly目录添加到仓库中&quot;git push origin main\n\n执行完这一步后，你可以在 Blog-Source 的 Actions 标签下看到执行的过程。\n\n等待它执行完毕后，就可以访问 https://用户名.github.io看到自己的博客也同步更新了。\n将 butterfly 作为子模块(可选)\n注意：4.3 和 4.4 二选其一即可。**如果你不确定使用哪个，那么请 和我一样选择 4.3。**按照我的步骤一步一步来。\n如果你选择的是 4.4，那么记得修改 4.1 中的 Actions 脚本，将 submodules: false修改为 submodules: true\n\n在 hexo 目录下添加一个文件 .gitmodules\n内容如下：它的意思就是将主题butterfly 作为 Git 的子模块引入，后续每次执行 Action 脚本时，会自动从 github 拉取最新的 butterfly 主题。\n[submodule &quot;themes/butterfly&quot;]  path = themes/butterfly  url = https://github.com/jerryc127/hexo-theme-butterfly.git\n\n部署 Qexo具体部署方法不再赘述，详情查看Qexo 文档 - 部署\n本人直接在公网的 vps 上安装了 docker，利用 docker 安装了 Qexo。在哪里配置都无所谓，成功了就行。\n\n\n这个 Github 密钥 就是Blog-Source中的GH_TOKEN，如果忘记了就再生成一个。\nGithub 仓库是 Blog-Source\n项目分支是 main (不确定就去 github 看一下，一般现在默认的就是 main)\n博客路径留空即可。\n\n然后正常情况下就可以登录进入到后台了。\n\nQexo 的一些配置现在直接点击新建文章的话，是不能上传图片的，因为截止到目前，我们还没有设置图床（可以理解为图片存放的位置）。\n图床配置既然将免费进行到底，那我们就继续薅 Github 的羊毛，将 Github 的仓库作为我们的图片库。\n在 Qexo 上的配置\n这里要注意：\n\n保存路径的最前面是不带 /的。\n自定义域名这里，直接在域名后面跟 /images/\n至于其他参数的含义，请参考：Qexo 文档 - 图床配置\n\n创建 images 文件夹保存路径中，我们只有 source 文件夹，但是没有 images 文件夹，我们需要新建它。本地新建文件夹后，放入一张图片，推送到远程即可。\n# 在hexo文件夹下执行命令mkdir source/images# 由于空文件夹不会被 Git 跟踪，我们需要放一张图片进images文件夹下git add .git commit -m &quot;新增了images文件夹&quot;git push origin main\n\n测试能否上传图片再 Qexo 中新建一篇文章，然后在图示的地方上传图片即可测试。\n\n结语到这里，自动化的过程基本就搭建完毕了，后续就是美化和魔改工作了。\n","categories":["hexo","butterfly","Qexo"],"tags":["hexo","Qexo","Github Actions","折腾记录","butterfly"]}]